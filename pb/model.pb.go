// Code generated by protoc-gen-go. DO NOT EDIT.
// source: model.proto

package model

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Course contains information about courses available
type Course struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Course) Reset()         { *m = Course{} }
func (m *Course) String() string { return proto.CompactTextString(m) }
func (*Course) ProtoMessage()    {}
func (*Course) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{0}
}

func (m *Course) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Course.Unmarshal(m, b)
}
func (m *Course) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Course.Marshal(b, m, deterministic)
}
func (m *Course) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Course.Merge(m, src)
}
func (m *Course) XXX_Size() int {
	return xxx_messageInfo_Course.Size(m)
}
func (m *Course) XXX_DiscardUnknown() {
	xxx_messageInfo_Course.DiscardUnknown(m)
}

var xxx_messageInfo_Course proto.InternalMessageInfo

func (m *Course) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Course) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Student struct {
	Id                   int32                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FirstName            string               `protobuf:"bytes,2,opt,name=firstName,proto3" json:"firstName,omitempty"`
	LastName             string               `protobuf:"bytes,3,opt,name=lastName,proto3" json:"lastName,omitempty"`
	DoB                  *timestamp.Timestamp `protobuf:"bytes,4,opt,name=doB,proto3" json:"doB,omitempty"`
	Course               *Course              `protobuf:"bytes,5,opt,name=course,proto3" json:"course,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Student) Reset()         { *m = Student{} }
func (m *Student) String() string { return proto.CompactTextString(m) }
func (*Student) ProtoMessage()    {}
func (*Student) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{1}
}

func (m *Student) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Student.Unmarshal(m, b)
}
func (m *Student) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Student.Marshal(b, m, deterministic)
}
func (m *Student) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Student.Merge(m, src)
}
func (m *Student) XXX_Size() int {
	return xxx_messageInfo_Student.Size(m)
}
func (m *Student) XXX_DiscardUnknown() {
	xxx_messageInfo_Student.DiscardUnknown(m)
}

var xxx_messageInfo_Student proto.InternalMessageInfo

func (m *Student) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Student) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Student) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *Student) GetDoB() *timestamp.Timestamp {
	if m != nil {
		return m.DoB
	}
	return nil
}

func (m *Student) GetCourse() *Course {
	if m != nil {
		return m.Course
	}
	return nil
}

type Students struct {
	Id                   uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Students             []*Student `protobuf:"bytes,2,rep,name=students,proto3" json:"students,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Students) Reset()         { *m = Students{} }
func (m *Students) String() string { return proto.CompactTextString(m) }
func (*Students) ProtoMessage()    {}
func (*Students) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{2}
}

func (m *Students) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Students.Unmarshal(m, b)
}
func (m *Students) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Students.Marshal(b, m, deterministic)
}
func (m *Students) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Students.Merge(m, src)
}
func (m *Students) XXX_Size() int {
	return xxx_messageInfo_Students.Size(m)
}
func (m *Students) XXX_DiscardUnknown() {
	xxx_messageInfo_Students.DiscardUnknown(m)
}

var xxx_messageInfo_Students proto.InternalMessageInfo

func (m *Students) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Students) GetStudents() []*Student {
	if m != nil {
		return m.Students
	}
	return nil
}

type Teachers struct {
	Id                   uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Teachers             []*Teacher `protobuf:"bytes,2,rep,name=teachers,proto3" json:"teachers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Teachers) Reset()         { *m = Teachers{} }
func (m *Teachers) String() string { return proto.CompactTextString(m) }
func (*Teachers) ProtoMessage()    {}
func (*Teachers) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{3}
}

func (m *Teachers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Teachers.Unmarshal(m, b)
}
func (m *Teachers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Teachers.Marshal(b, m, deterministic)
}
func (m *Teachers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Teachers.Merge(m, src)
}
func (m *Teachers) XXX_Size() int {
	return xxx_messageInfo_Teachers.Size(m)
}
func (m *Teachers) XXX_DiscardUnknown() {
	xxx_messageInfo_Teachers.DiscardUnknown(m)
}

var xxx_messageInfo_Teachers proto.InternalMessageInfo

func (m *Teachers) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Teachers) GetTeachers() []*Teacher {
	if m != nil {
		return m.Teachers
	}
	return nil
}

type Teacher struct {
	Id                   int32                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FirstName            string               `protobuf:"bytes,2,opt,name=firstName,proto3" json:"firstName,omitempty"`
	LastName             string               `protobuf:"bytes,3,opt,name=lastName,proto3" json:"lastName,omitempty"`
	DoB                  *timestamp.Timestamp `protobuf:"bytes,4,opt,name=doB,proto3" json:"doB,omitempty"`
	JoinedDate           *timestamp.Timestamp `protobuf:"bytes,5,opt,name=joinedDate,proto3" json:"joinedDate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Teacher) Reset()         { *m = Teacher{} }
func (m *Teacher) String() string { return proto.CompactTextString(m) }
func (*Teacher) ProtoMessage()    {}
func (*Teacher) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{4}
}

func (m *Teacher) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Teacher.Unmarshal(m, b)
}
func (m *Teacher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Teacher.Marshal(b, m, deterministic)
}
func (m *Teacher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Teacher.Merge(m, src)
}
func (m *Teacher) XXX_Size() int {
	return xxx_messageInfo_Teacher.Size(m)
}
func (m *Teacher) XXX_DiscardUnknown() {
	xxx_messageInfo_Teacher.DiscardUnknown(m)
}

var xxx_messageInfo_Teacher proto.InternalMessageInfo

func (m *Teacher) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Teacher) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Teacher) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *Teacher) GetDoB() *timestamp.Timestamp {
	if m != nil {
		return m.DoB
	}
	return nil
}

func (m *Teacher) GetJoinedDate() *timestamp.Timestamp {
	if m != nil {
		return m.JoinedDate
	}
	return nil
}

type Response struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Code                 int32    `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{5}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Response) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type Request struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{6}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*Course)(nil), "model.Course")
	proto.RegisterType((*Student)(nil), "model.Student")
	proto.RegisterType((*Students)(nil), "model.Students")
	proto.RegisterType((*Teachers)(nil), "model.Teachers")
	proto.RegisterType((*Teacher)(nil), "model.Teacher")
	proto.RegisterType((*Response)(nil), "model.Response")
	proto.RegisterType((*Request)(nil), "model.Request")
}

func init() {
	proto.RegisterFile("model.proto", fileDescriptor_4c16552f9fdb66d8)
}

var fileDescriptor_4c16552f9fdb66d8 = []byte{
	// 418 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x52, 0x4b, 0x8e, 0xd4, 0x30,
	0x10, 0x55, 0xfe, 0xe9, 0x8a, 0x98, 0x91, 0xbc, 0x0a, 0x11, 0x12, 0x51, 0xa4, 0x11, 0x01, 0x46,
	0x19, 0xa9, 0xd9, 0x20, 0x76, 0x7c, 0x67, 0xc7, 0xc2, 0xf4, 0x05, 0xd2, 0xed, 0xea, 0x10, 0x94,
	0xc4, 0x4d, 0xec, 0x20, 0x8e, 0xc4, 0x25, 0xb8, 0x0b, 0x47, 0x41, 0x71, 0x9c, 0xf4, 0x8f, 0x26,
	0xec, 0xd8, 0xb9, 0xfc, 0xde, 0x2b, 0xbf, 0x57, 0x2e, 0x08, 0x6a, 0xce, 0xb0, 0xca, 0x76, 0x2d,
	0x97, 0x9c, 0x38, 0xaa, 0x88, 0x1e, 0x17, 0x9c, 0x17, 0x15, 0xde, 0xa9, 0xcb, 0x75, 0xb7, 0xbd,
	0x93, 0x65, 0x8d, 0x42, 0xe6, 0xf5, 0x6e, 0xe0, 0x25, 0xb7, 0xe0, 0xbe, 0xe5, 0x5d, 0x2b, 0x90,
	0x5c, 0x81, 0x59, 0xb2, 0xd0, 0x88, 0x8d, 0xd4, 0xa1, 0x66, 0xc9, 0x08, 0x01, 0xbb, 0xc9, 0x6b,
	0x0c, 0xcd, 0xd8, 0x48, 0x17, 0x54, 0x9d, 0x93, 0x1f, 0x06, 0x78, 0x9f, 0x64, 0xc7, 0xb0, 0x91,
	0x67, 0xfc, 0x47, 0xb0, 0xd8, 0x96, 0xad, 0x90, 0x1f, 0xf7, 0xa2, 0xfd, 0x05, 0x89, 0xc0, 0xaf,
	0x72, 0x0d, 0x5a, 0x0a, 0x9c, 0x6a, 0x72, 0x0b, 0x16, 0xe3, 0x6f, 0x42, 0x3b, 0x36, 0xd2, 0x60,
	0x19, 0x65, 0x83, 0xe5, 0x6c, 0xb4, 0x9c, 0xad, 0x46, 0xcb, 0xb4, 0xa7, 0x91, 0x1b, 0x70, 0x37,
	0xca, 0x71, 0xe8, 0x28, 0xc1, 0x83, 0x6c, 0xc8, 0x3d, 0xc4, 0xa0, 0x1a, 0x4c, 0x3e, 0x80, 0xaf,
	0x9d, 0x8a, 0x03, 0xab, 0xb6, 0xb2, 0xfa, 0x0c, 0x7c, 0xa1, 0xb1, 0xd0, 0x8c, 0xad, 0x34, 0x58,
	0x5e, 0xe9, 0x26, 0x5a, 0x42, 0x27, 0xbc, 0xef, 0xb3, 0xc2, 0x7c, 0xf3, 0x19, 0xdb, 0x3f, 0xf6,
	0x91, 0x1a, 0x3b, 0xe9, 0xa3, 0x25, 0x74, 0xc2, 0x93, 0x9f, 0x06, 0x78, 0xfa, 0xf6, 0xbf, 0x8d,
	0xee, 0x15, 0xc0, 0x17, 0x5e, 0x36, 0xc8, 0xde, 0xe5, 0x72, 0x1c, 0xdf, 0xdf, 0x44, 0x07, 0xec,
	0xe4, 0x25, 0xf8, 0x14, 0xc5, 0x8e, 0x37, 0x02, 0x49, 0x08, 0x5e, 0x8d, 0x42, 0xe4, 0x05, 0xaa,
	0x10, 0x0b, 0x3a, 0x96, 0xfd, 0xd2, 0x6c, 0x38, 0x1b, 0x42, 0x38, 0x54, 0x9d, 0x93, 0x87, 0xe0,
	0x51, 0xfc, 0xda, 0xa1, 0x38, 0xdb, 0x99, 0xe5, 0x2f, 0x03, 0x02, 0x3d, 0xf2, 0x15, 0x7e, 0x97,
	0xe4, 0x79, 0xff, 0x48, 0x51, 0x0a, 0xd9, 0x0f, 0xe9, 0xf8, 0x4b, 0xa2, 0x6b, 0x5d, 0x4f, 0x2e,
	0x9e, 0x80, 0xfd, 0x9e, 0x95, 0x72, 0x9e, 0x78, 0x03, 0xd6, 0x3d, 0xee, 0x79, 0xda, 0x4c, 0x74,
	0xa2, 0x23, 0x4f, 0xc1, 0xbd, 0x47, 0xf9, 0xba, 0xaa, 0xce, 0x98, 0xd7, 0xc7, 0x4c, 0xd1, 0x53,
	0x29, 0xd6, 0xfc, 0x1b, 0x5e, 0xa4, 0x8e, 0x8f, 0xab, 0x88, 0xfa, 0xdf, 0x2f, 0x46, 0xd4, 0xf8,
	0x7c, 0xc4, 0x8b, 0xc4, 0x99, 0x88, 0xe3, 0xe2, 0xcd, 0x47, 0x9c, 0x76, 0xfd, 0xdf, 0x23, 0xae,
	0x5d, 0xb5, 0x3a, 0x2f, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x7b, 0x21, 0x6a, 0xe8, 0x81, 0x04,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StudentTextClient is the client API for StudentText service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StudentTextClient interface {
	Register(ctx context.Context, in *Student, opts ...grpc.CallOption) (*Response, error)
	Edit(ctx context.Context, in *Student, opts ...grpc.CallOption) (*Response, error)
	Get(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Student, error)
	GetAll(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Students, error)
	Remove(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type studentTextClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentTextClient(cc grpc.ClientConnInterface) StudentTextClient {
	return &studentTextClient{cc}
}

func (c *studentTextClient) Register(ctx context.Context, in *Student, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/model.StudentText/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentTextClient) Edit(ctx context.Context, in *Student, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/model.StudentText/Edit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentTextClient) Get(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Student, error) {
	out := new(Student)
	err := c.cc.Invoke(ctx, "/model.StudentText/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentTextClient) GetAll(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Students, error) {
	out := new(Students)
	err := c.cc.Invoke(ctx, "/model.StudentText/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentTextClient) Remove(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/model.StudentText/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentTextServer is the server API for StudentText service.
type StudentTextServer interface {
	Register(context.Context, *Student) (*Response, error)
	Edit(context.Context, *Student) (*Response, error)
	Get(context.Context, *Request) (*Student, error)
	GetAll(context.Context, *Request) (*Students, error)
	Remove(context.Context, *Request) (*Response, error)
}

// UnimplementedStudentTextServer can be embedded to have forward compatible implementations.
type UnimplementedStudentTextServer struct {
}

func (*UnimplementedStudentTextServer) Register(ctx context.Context, req *Student) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedStudentTextServer) Edit(ctx context.Context, req *Student) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Edit not implemented")
}
func (*UnimplementedStudentTextServer) Get(ctx context.Context, req *Request) (*Student, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedStudentTextServer) GetAll(ctx context.Context, req *Request) (*Students, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedStudentTextServer) Remove(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}

func RegisterStudentTextServer(s *grpc.Server, srv StudentTextServer) {
	s.RegisterService(&_StudentText_serviceDesc, srv)
}

func _StudentText_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Student)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentTextServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.StudentText/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentTextServer).Register(ctx, req.(*Student))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentText_Edit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Student)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentTextServer).Edit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.StudentText/Edit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentTextServer).Edit(ctx, req.(*Student))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentText_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentTextServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.StudentText/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentTextServer).Get(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentText_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentTextServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.StudentText/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentTextServer).GetAll(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentText_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentTextServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.StudentText/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentTextServer).Remove(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _StudentText_serviceDesc = grpc.ServiceDesc{
	ServiceName: "model.StudentText",
	HandlerType: (*StudentTextServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _StudentText_Register_Handler,
		},
		{
			MethodName: "Edit",
			Handler:    _StudentText_Edit_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _StudentText_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _StudentText_GetAll_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _StudentText_Remove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "model.proto",
}

// TeacherTextClient is the client API for TeacherText service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TeacherTextClient interface {
	Register(ctx context.Context, in *Teacher, opts ...grpc.CallOption) (*Response, error)
	Edit(ctx context.Context, in *Teacher, opts ...grpc.CallOption) (*Response, error)
	Get(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Teacher, error)
	GetAll(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Teachers, error)
	Remove(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type teacherTextClient struct {
	cc grpc.ClientConnInterface
}

func NewTeacherTextClient(cc grpc.ClientConnInterface) TeacherTextClient {
	return &teacherTextClient{cc}
}

func (c *teacherTextClient) Register(ctx context.Context, in *Teacher, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/model.TeacherText/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherTextClient) Edit(ctx context.Context, in *Teacher, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/model.TeacherText/Edit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherTextClient) Get(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Teacher, error) {
	out := new(Teacher)
	err := c.cc.Invoke(ctx, "/model.TeacherText/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherTextClient) GetAll(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Teachers, error) {
	out := new(Teachers)
	err := c.cc.Invoke(ctx, "/model.TeacherText/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherTextClient) Remove(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/model.TeacherText/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeacherTextServer is the server API for TeacherText service.
type TeacherTextServer interface {
	Register(context.Context, *Teacher) (*Response, error)
	Edit(context.Context, *Teacher) (*Response, error)
	Get(context.Context, *Request) (*Teacher, error)
	GetAll(context.Context, *Request) (*Teachers, error)
	Remove(context.Context, *Request) (*Response, error)
}

// UnimplementedTeacherTextServer can be embedded to have forward compatible implementations.
type UnimplementedTeacherTextServer struct {
}

func (*UnimplementedTeacherTextServer) Register(ctx context.Context, req *Teacher) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedTeacherTextServer) Edit(ctx context.Context, req *Teacher) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Edit not implemented")
}
func (*UnimplementedTeacherTextServer) Get(ctx context.Context, req *Request) (*Teacher, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedTeacherTextServer) GetAll(ctx context.Context, req *Request) (*Teachers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedTeacherTextServer) Remove(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}

func RegisterTeacherTextServer(s *grpc.Server, srv TeacherTextServer) {
	s.RegisterService(&_TeacherText_serviceDesc, srv)
}

func _TeacherText_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Teacher)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherTextServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.TeacherText/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherTextServer).Register(ctx, req.(*Teacher))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherText_Edit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Teacher)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherTextServer).Edit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.TeacherText/Edit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherTextServer).Edit(ctx, req.(*Teacher))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherText_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherTextServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.TeacherText/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherTextServer).Get(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherText_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherTextServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.TeacherText/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherTextServer).GetAll(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherText_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherTextServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.TeacherText/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherTextServer).Remove(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _TeacherText_serviceDesc = grpc.ServiceDesc{
	ServiceName: "model.TeacherText",
	HandlerType: (*TeacherTextServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _TeacherText_Register_Handler,
		},
		{
			MethodName: "Edit",
			Handler:    _TeacherText_Edit_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _TeacherText_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _TeacherText_GetAll_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _TeacherText_Remove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "model.proto",
}
